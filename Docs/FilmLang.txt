FilmLang
==============

- The FilmLang language is Javascript with some additional function calls. 

- addBlock(dictionary)
- includeFile("/path/to/filmlangtext.js")

Otherwise you can use all basic Javascript code including variables, loops, math, and other main function calls.

- addBlock() takes a Javascript dictionary which is a a set of comma separated key:value pairs. For example:

let circle =
{
	type:CIRCLE,
	name:"circle1",
	layoutSpec:{x:1,y:2,fit:true},
	radius:35,
	center:true,
	strokeColor:orange,
	strokeWidth:2,
	childBlock0: {type:TEXT,name:"title",text:"A Circle",size:15,center:true,textColor:red,font:"Helvetica" },
	waitStartSeconds:2.0,
	waitEndSeconds:4.0,
	animation7:{property:"transform.rotation.z",from:0,to:6,duration:4.0,autoReverses:true},
	animation8:{property:"transform.rotation.x",from:0,to:6,duration:4.0,autoReverses:true},
	parent: "block1"
}
addBlock(circle)



- Basic dictionary keys that apply to most block types. 

debug:Bool
debugColor:{red:1.0, green:0.0, blue:0.0, alpha:1.0}
debugFontSize:Double
debugFont:"FontName"
clip:Bool
fitToView:Bool
x:double
y:double
z:doubler
width:double
height:double
fillColor:L{color}
strokeColor:{color}
radius:double
rotation:
strokeWidth:double
strokeStart:0.0 - 1.0
strokeEnd:0.0 - 1.0
gradientAngle:double
hidden:Bool
center:Bool
closePath:Bool
scalePath:double
waitStartSeconds:double
waitEndSeconds:double
lineCap:"butt" | "round"
layoutSpec:{Spec}
fillGradient:{{color},{color}}
windowOffset:double
animation: {animation parameters}


- Animation parameters

property:"name"
duration:double
autoReverses:Bool
repeatDuration:Bool
repeatCount:int
waitStartSeconds:double
move:{x:X,y:Y}
toColor:{color}
fromColor:{color}
to:
from:
max:
fromRadius:double
toRadius:double
fromAngles:double
toAngles:double


- Text
	text: "text"
	font: "fontname"
	textColor: { red:.7, green:0.0, blue:0.0, alpha:0.8 }
	size: 15.0
	padding: 2.0

- RECT
	x: 10.0
	y: 10.0	
	width: 20.0
	height: 20.0
	strokeColor:{color}
	fillColor:{color}
	radius:4
	strokeWidth:3

- LINE
	x: 10.0
	y: 10.0
	endX: 20.0
	endY: 20.0

- SCROLLTEXT
	text: "text"
	textFile: "filename" | "/path/filename"
	textURL: "https://www.foo.com/text"
	font: "fontname"
	textColor: { red:.7, green:0.0, blue:0.0, alpha:0.8 }
	size: 15.0
	padding: 2.0

- GRID
	xspacing: 10.0
	yspacing: 10.0
	gridColor: { red:.7, green:0.0, blue:0.0, alpha:0.8 }
	gridStrokeWidth: 2.0

- BEZIER
	point0: { x:50.38, y:0 },
    point1: { point: { x:73.84, y:4.31 }, controlPoint1: { x: 59.54, y: 0 }, controlPoint2: {x: 67.36, y: 1.44 }},
	point2: { cmd:"close" },

- CIRCLE
- AXIS
- SOUNDFILE
- IMAGE
- SCENE
- NUMBER



Details
========

- You must have a RECT block named "Screen":

let screen =
{
	type:RECT,
	name:"Screen",
	x:20,
	y:20,
	width:300,
	height:400,
	gradientAngle:-50,
	clip:true,
	fitToView:true,
	fillGradient: { startColor: {red:0.0, green:0.5, blue:0.5, alpha:0.6},endColor: {red:0.0, green:0.0, blue:0.0, alpha:0.4}},
}
addBlock(screen)


- You may have a layout grid:

let layout =
{
	type:LAYOUT,
	name:"mylayout",
	xcount:5,
	ycount:5,
}
addBlock(layout)


